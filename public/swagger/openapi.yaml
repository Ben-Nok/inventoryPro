openapi: 3.0.3
info:
  title: InventoryPro-API
  description: Inventory Management Software
  version: 1.0.0

servers:
  - url: http://localhost/api
    description: local dev environment



paths:
  /products:
    post:
      summary: Create a new product
      tags:
        - Products
      description: Adds a new product to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get all products
      tags:
        - Products
      description: Retrieves a list of all products in the inventory.
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /products/{id}:
    get:
      summary: Get product details
      tags:
        - Products
      description: Retrieves detailed information about a specific product by its UUID.
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a product
      tags:
        - Products
      description: Updates the details of a specific product by its UUID.
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a product
      tags:
        - Products
      description: Deletes a product from the inventory, including its stock.
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: Product deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /storages:
    post:
      summary: Create a new storage location
      tags:
        - Storages
      description: Adds a new storage location to the system.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageCreate'
      responses:
        '200':
          description: Storage location created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get all storages
      tags:
        - Storages
      description: Retrieves a list of all storages.
      responses:
        '200':
          description: A list of storages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Storage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /storages/{id}:
    get:
      summary: Get storage details
      tags:
        - Storages
      description: Retrieves detailed information about a specific storage by its UUID.
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: Storage found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      summary: Update a storage location
      tags:
        - Storages
      description: Updates the details of a specific storage location.
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageUpdate'
      responses:
        '200':
          description: Storage updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a storage location
      tags:
        - Storages
      description: Deletes a storage location from the system.
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: Storage deleted successfully
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /inventory:
    get:
      summary: Get complete inventory
      tags:
        - Inventory
      description: Retrieve a list of the complete inventory
      responses:
        200:
          description: Inventory retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Inventory"
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: create a new inventory movement
      tags:
        - Inventory
      description: removes or adds stock of a product in a storage
      parameters:
        - $ref: '#/components/parameters/ProductId'
        - $ref: '#/components/parameters/StorageId'
        - $ref: '#/components/parameters/MovementType'
        - name: quantity
          in: query
          required: true
          description: product quantity added or removed
          schema:
            type: integer
            minimum: 1
      responses:
        200:
          description: Stock changed successfully
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/StorageMovement'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /inventory/product/{id}:
    get:
      summary: retrieve the Inventory and of a specific product.
      description: retrieve the stock, storage locations and details of a specific product.
      tags:
        - Inventory
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        200:
          description: inventory retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /inventory/storage/{id}:
    get:
      summary: retrieve the Inventory and of a specific storage.
      description: retrieve the stocked products and details of a specific storage.
      tags:
        - Inventory
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        200:
          description: storage inventory retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageInventory'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    PathId:
      name: id
      in: path
      required: true
      description: UUID of a product or storage
      schema:
        type: string

    StorageId:
      name: storage_id
      in: query
      required: true
      description: UUID of a storage
      schema:
        type: string

    ProductId:
      name: product_id
      in: query
      required: true
      description: UUID of a storage
      schema:
        type: string

    MovementType:
      name: movement_type
      in: query
      required: true
      description: in = product stock was added to a storage; out = product stock was removed from a storage
      schema:
        type: string
        enum: [in, out]
        default: out

  schemas:
    Product:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ProductCreate:
      type: object
      required:
        - name
        - description
        - sku
      properties:
        name:
          type: string
        description:
          type: string
        sku:
          type: string
        storage_uuid:
          type: string
        quantity:
          type: integer
        alert_at_quantity:
          type: integer

    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        sku:
          type: string

    Storage:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        name:
          type: string
        location:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    StorageCreate:
      type: object
      required:
        - name
        - location
      properties:
        name:
          type: string
        location:
          type: string

    StorageUpdate:
      type: object
      properties:
        name:
          type: string
        location:
          type: string

    Stock:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        storage_id:
          type: string
          format: uuid
        quantity:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Inventory:
      type: object
      properties:
        product:
          $ref: "#/components/schemas/Product"
        quantity_in_storage:
          type: integer
        storage_locations:
          type: array
          items:
            $ref: '#/components/schemas/Stock'

    StorageInventory:
      type: object
      properties:
        storage:
          $ref: '#/components/schemas/Storage'
        stock:
          type: array
          items:
            $ref: '#/components/schemas/Stock'

    StorageMovement:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        product_id:
          type: string
          format: uuid
        storage_id:
          type: string
          format: uuid
        movement:
          type: string
          enum: [out, in]
        quantity:
          type: integer
          example: 5
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        message:
          type: string
          example: "Bad Request"

  responses:
    BadRequestError:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example:
              value:
                code: 400
                message: Ungültige Anfrage – Bitte überprüfen Sie Ihre Eingabe.

    NotFoundError:
      description: Resource Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example:
              value:
                code: 404
                message: Die angeforderte Ressource wurde nicht gefunden.

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            example:
              value:
                code: 500
                message: Ein unerwarteter Fehler ist aufgetreten. Bitte versuchen Sie es später erneut.
